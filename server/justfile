set shell := ["bash", "-c"]

set dotenv-load

# Generate a new prisma schema that will be used inside the code
prisma_generate *ADDITIONAL_GENERATORS:
    #!/usr/bin/env bash
    cat ../database/prisma/schema.prisma > prisma/schema.prisma
    for generator in {{ADDITIONAL_GENERATORS}}; do
        cat prisma/${generator}_generator.prisma >> prisma/schema.prisma
    done
    npx prisma generate --schema=prisma/schema.prisma

# Migrate database schema to desired DB with specified environment (possible values are: prod, preprod and dev)
prisma_migrate env:
    #!/usr/bin/env python3
    if "{{env}}" in ["prod", "preprod", "dev"]:
        import os
        import subprocess
        import sys
        subprocess.run(["npx", "dotenv", "-e", ".env/.env.{{env}}", "--", "npx", "prisma", "migrate", "dev", "--name", "db_init" ,"--schema=../database/prisma/schema.prisma"])
    else:
        print("Invalid environment")
        sys.exit(1)

# Launch and open prisma studio in specified environment (possible values are: prod, preprod and dev)
prisma_studio env:
    #!/usr/bin/env python3
    if "{{env}}" in ["prod", "preprod", "dev"]:
        import os
        import subprocess
        import sys
        subprocess.run(["npx", "dotenv", "-e", ".env/.env.{{env}}", "--", "npx", "prisma", "studio"])
    else:
        print("Invalid environment")
        sys.exit(1)

# Convert all files in the current directory to unix format and serve docs on port 5858
prisma_serve_docs:
    find . -type f | xargs dos2unix
    npx prisma-docs-generator serve

# Setup postgresql container for the first time, this will create a new container named area_db
# To run the container again, use the command: `docker start area_db`
start_postgres_container:
    @docker run --name area_db -e POSTGRES_PASSWORD=azer -p 5432:5432 -d postgres