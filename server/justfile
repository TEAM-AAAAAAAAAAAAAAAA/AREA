set shell := ["bash", "-c"]

set dotenv-load

# Generate a new prisma schema that will be used inside the code
prisma_generate *ADDITIONAL_GENERATORS:
    #!/usr/bin/env bash
    for generator in {{ADDITIONAL_GENERATORS}}; do
        cat src/prisma/generators/${generator}_generator.prisma > src/prisma/generators/generator.prisma
    done
    cat ../database/prisma/schema.prisma >> src/prisma/generators/generator.prisma
    npx prisma generate --schema=src/prisma/generators/generator.prisma

# Migrate database schema to desired DB with specified environment (possible values are: prod, preprod and dev)
prisma_migrate env:
    #!/usr/bin/env python3
    if "{{env}}" is in ["prod", "preprod", "dev"]:
        import os
        import subprocess
        import sys
        from dotenv import load_dotenv
        load_dotenv(dotenv_path=f".env/.{{env}}.env")
        subprocess.run(["npx", "prisma", "migrate", "dev", "--name", "db_init" ,"--schema=../database/prisma/schema.prisma"])
    else:
        print("Invalid environment")
        sys.exit(1)

# Launch and open prisma studio in specified environment (possible values are: prod, preprod and dev)
prisma_studio env:
    #!/usr/bin/env python3
    if "{{env}}" in ["prod", "preprod", "dev"]:
        import os
        import subprocess
        import sys
        from dotenv import load_dotenv
        load_dotenv(dotenv_path=f".env/.{{env}}.env")
        subprocess.run(["npx", "prisma", "studio"])
    else:
        print("Invalid environment")
        sys.exit(1)

prisma_serve_docs:
    find . -type f | xargs dos2unix
    npx prisma-docs-generator serve

# Setup postgresql container
start_postgres_container:
    @docker run --name area_db -e POSTGRES_PASSWORD=azer -p 5432:5432 -d postgres