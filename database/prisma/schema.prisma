generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id                 String               @id @unique @default(uuid())
  email              String               @unique
  name               String
  password           String
  createdAt          DateTime             @default(now())
  emailVerified      Boolean              @default(false)
  tokens             Token[]
  Webhook            Webhook[]
  CreateUserResponse CreateUserResponse[]
}

model Token {
  id        String    @id @unique @default(uuid())
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  valid     Boolean   @default(true)
  user      User      @relation(fields: [userId], references: [id])
  type      TokenType
}

model Service {
  serviceName           String                  @id @unique
  Action                Action[]
  CreateServiceResponse CreateServiceResponse[]
  Webhook               Webhook[]
}

model Webhook {
  webhookId           String   @id @default(uuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id])
  reactionId          Int      @unique
  reaction            Reaction @relation(fields: [reactionId], references: [reactionId])
  incomingServiceName String
  incomingService     Service  @relation(fields: [incomingServiceName], references: [serviceName])
}

model Action {
  actionName  String
  serviceName String
  service     Service    @relation(fields: [serviceName], references: [serviceName])
  Reaction    Reaction[]

  @@id([serviceName, actionName])
  @@unique([serviceName, actionName])
}

model Reaction {
  reactionId      Int              @id @default(autoincrement())
  serviceName     String
  actionName      String
  action          Action           @relation(fields: [serviceName, actionName], references: [serviceName, actionName])
  incomingWebhook Webhook?
  outgoingWebhook String?
  actions         ActionReaction[] @relation("action")
  reactions       ActionReaction[] @relation("reaction")
  enabled         Boolean          @default(true)
  enabledChain    Boolean          @default(true)
}

model ActionReaction {
  actionId   Int
  reactionId Int
  action     Reaction @relation(name: "action", map: "action", fields: [actionId], references: [reactionId])
  reaction   Reaction @relation(name: "reaction", map: "reaction", fields: [reactionId], references: [reactionId])

  @@id([actionId, reactionId])
}

model CreateUserResponse {
  id      Int     @id @default(autoincrement())
  code    Int
  success Boolean
  message String
  user    User?   @relation(fields: [userId], references: [id])
  userId  String?
}

model CreateServiceResponse {
  id          Int      @id @default(autoincrement())
  code        Int
  success     Boolean
  message     String
  service     Service? @relation(fields: [serviceName], references: [serviceName])
  serviceName String?
}

enum TokenType {
  EMAIL_VERIFICATION
  API
  PASSWORD_RESET
}
