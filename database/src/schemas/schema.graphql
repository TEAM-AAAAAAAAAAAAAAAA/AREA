"""
A custom scalar type representing a JSON object. The JSON object can contain
any valid JSON data type: string, number, object, array, boolean, or null.
"""
scalar JSON

"""
A custom scalar type representing a JSON object. The JSON object can only
contain key-value pairs where the keys are strings and the values are any valid
JSON data type: string, number, object, array, boolean, or null.
"""
scalar JSONObject

"""
A custom scalar type representing a date and time in ISO 8601 format.
For example, "2019-11-19T23:55:34Z" represents November 19, 2019 at
23:55:34 UTC.
"""
scalar DateTime

"""
An enumeration representing the types of tokens that can be created.
"""
enum TokenType {
  EMAIL_VERIFICATION
  API
  PASSWORD_RESET
}

"""
A user object with a unique identifier, name, email, and creation date.
"""
type User {
  id: ID!
  name: String!
  email: String!
  createdAt: DateTime!
}

"""
A service object representing a third-party service that can be integrated with.
"""
type Service {
  """
  The name of the service.
  """
  serviceName: String!
}

"""
A reaction object representing a reaction that can be triggered by a webhook.
"""
type Reaction {
  """
  The unique identifier of the reaction.
  """
  reactionId: Int!

  """
  The name of the reaction.
  """
  reactionName: String!

  """
  The name of the service associated with the reaction.
  """
  serviceName: String!

  """
  The service associated with the reaction.
  """
  service: Service!

  """
  The React object representing the action to be taken when the reaction is triggered.
  """
  react: React!

  """
  The URL of the outgoing webhook associated with the reaction.
  """
  outgoingWebhook: String

  """
  A flag indicating whether the reaction is enabled or not.
  """
  enabled: Boolean!

  """
  A flag indicating whether the reaction is part of a chain or not.
  """
  enabledChain: Boolean!
}

"""
A React object representing an action that can be taken when a webhook is triggered.
"""
type React {
  """
  The name of the action.
  """
  reactionName: String!

  """
  A description of the action.
  """
  description: String!

  """
  The name of the service associated with the action.
  """
  serviceName: String!

  """
  The service associated with the action.
  """
  service: Service!
}

"""
A webhook object representing a webhook that can be triggered by an external source.
"""
type Webhook {
  """
  The unique identifier of the webhook.
  """
  webhookId: String!

  """
  The user associated with the webhook.
  """
  user: User!

  """
  The Reaction object representing the reaction to be triggered when the webhook is activated.
  """
  reaction: Reaction!

  """
  The Service object representing the external service from which the webhook originates.
  """
  incomingService: Service!
}

"""
An action object representing an action that can be taken by a user.
"""
type Action {
  """
  The name of the action.
  """
  actionName: String!

  """
  A description of the action.
  """
  description: String!

  """
  The name of the service associated with the action.
  """
  serviceName: String!
}

"""
An action-reaction pair that defines what should happen when an action occurs
"""
type ActionReaction {
    action: Reaction!
    reaction: Reaction!
}

"""
An OAuth provider used for authentication
"""
type oAuthProvider {
    oAuthProviderName: String!
    service: Service
    serviceName: String
}

"""
OAuth user data associated with a user account
"""
type oAuthUserData {
    user: User!
    data: JSONObject
    oAuthProvider: oAuthProvider!
    accessToken: String
    refreshToken: String
}

"""
Discord bot webhook data
"""
type DiscordBotWebhook {
    command: String!
    webhookWebhookId: String!
    webhook: Webhook!
    userId: String!
    serverId: String!
    user: User!
}

"""
A token used for authentication
"""
type Token {
    id: String!
    userId: String!
    createdAt: DateTime!
    updatedAt: DateTime!
    valid: Boolean!
    user: User!
    type: TokenType!
}

"""
The root query object of the schema
"""
type Query {
    """
    Retrieves a user by ID
    """
    user(id: ID!): User

    """
    Retrieves all users
    """
    allUsers: [User!]!

    """
    Retrieves all services
    """
    allServices: [Service!]!

    """
    Retrieves all webhooks
    """
    allWebhooks: [Webhook!]!

    """
    Retrieves all reactions
    """
    allReact: [React!]!

    """
    Retrieves all reactions
    """
    allReactions: [Reaction!]!

    """
    Retrieves all actions
    """
    allActions: [Action!]!

    """
    Retrieves all action-reaction pairs
    """
    allActionReactions: [ActionReaction!]!

    """
    Retrieves all OAuth user data
    """
    allOAuthUserData: [oAuthUserData!]!

    """
    Retrieves all OAuth providers
    """
    allOAuthProviders: [oAuthProvider!]!

    """
    Retrieves information about a webhook
    """
    userInfo(id: ID!): [Webhook!]!

    """
    Retrieves all Discord bot webhooks
    """
    allDiscordBotWebhooks: [DiscordBotWebhook!]!

    """
    Retrieves all tokens
    """
    allTokens: [Token!]!
}

"""
The root mutation type for modifying data in the system.
"""
type Mutation {
  """
  Remove all webhooks in the system.
  """
  removeWebhooks: Int!

  """
  Create a new action with the specified name, description, and service name.
  """
  createAction(actionName: String!, description: String!, serviceName: String!): Int!

  """
  Create a new webhook with the specified user ID, reaction name, action ID, service ID, and optional outgoing webhook URL.
  """
  createWebhook(userId: String!, reactionName: String!, actionId: String!, serviceId: String!, outgoingWebhook: String): Int!

  """
  Create a new user with the specified name, email, and password.
  """
  createUser(name: String!, email: String!, password: String!): Int!

  """
  Create a new service with the specified name.
  """
  createService(name: String!): Int!

  """
  Create a new chained reaction with the specified action name, action service name, reaction name, reaction service name, and optional outgoing webhook URLs.
  """
  createChainedReaction(actionName: String!, actionService: String!, reactionName: String!, reactionService: String!, reactionOutgoingWebhook: String, actionOutgoingWebhook: String): Int!

  """
  Create new OAuth user data with the specified user ID, refresh token, access token, data, OAuth provider name, and provider user ID.
  """
  createOAuthUserData(userId: String!, refreshToken: String, accessToken: String, data: JSONObject, oAuthProviderName: String!, providerUserId: String!): Int!

  """
  Create a new Discord bot webhook with the specified command, user ID, server ID, reaction name, action ID, service ID, and optional outgoing webhook URL.
  """
  createDiscordBotWebhook(command: String!, userId: String!, serverId: String!, reactionName: String!, actionId: String!, serviceId: String!, outgoingWebhook: String): Int!

  """
  Create a new token with the specified user ID and token type.
  """
  createToken(userId: String!, type: TokenType!): Token!

  """
  Delete the service with the specified name.
  """
  deleteService(name: String!): Int!
}